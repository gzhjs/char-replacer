Node.js的child_process模块中有两个方法spawn和exec，这两个方法都可以被用来开启一个子进程来执行其他的程序。一些Node.js的新手常常对这个两个方法感到很困惑：既然两个方法的功能一样，那么究竟应该选择哪个方法。在本文中，我们将一起来探索spawn和我exec方法的不同之处，以便你在将来能够选择正确的方法。

child_process.spaen会返回一个带有stdout和stderr流的对象。你可以通过stdout流来读取子进程返回给Node.js的数据。stdout拥有’data’,’end’以及一般流所具有的事件。当你想要子进程返回大量数据给Node时，比如说图像处理，读取二进制数据等等，你最好使用spawn方法。

child_process.spawn方法是“异步中的异步”，意思是在子进程开始执行时，它就开始从一个流总将数据从子进程返回给Node。

下面是一个例子，比如说我们想从一个URL下载文件，我们选择使用curl工具，此时，我们就可以在Node中使用spawn运行curl工具，下面是具体代码.
// 使用curl下载文件的函数
var download_file_curl = function(file_url) {

    // 提取文件名
    var file_name = url.parse(file_url).pathname.split('/').pop();
    // 创建一个可写流的实例
    var file = fs.createWriteStream(DOWNLOAD_DIR + file_name);
    // 使用spawn运行curl
    var curl = spawn('curl', [file_url]);
    // 为spawn实例添加了一个data事件
    curl.stdout.on('data', function(data) { file.write(data); });
    // 添加一个end监听器来关闭文件流
    curl.stdout.on('end', function(data) {
        file.end();
        console.log(file_name + ' downloaded to ' + DOWNLOAD_DIR);
    });
    // 当子进程退出时，检查是否有错误，同时关闭文件流
    curl.on('exit', function(code) {
        if (code != 0) {
            console.log('Failed: ' + code);
        }
    });
};
